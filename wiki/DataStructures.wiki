#summary Description of different data structures used by server and client
#labels Phase-Design

= Introduction =

This page describes different data structures used by server and client
If you want to use new data structures that may be shared between different parts of the project, please describe them here.

= Content =

== Player state ==

AB : The data structure that will represent a player state (position etc.) will probably be used a lot across the project. We don't need to share this structure between server and client but I guess it would be a "good practice" to do so. Since be don't know all the details of the project constraints, this proposal may change in a near future. Please change this proposal if you have a better proposition.

Assumptions : players positions are defined by 16-bit unsigned integers
(WARNING : MicroBlaze uses Big-Endian)

<table border="1" cellspacing="0">
<tr>
<th>Bit offset</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th><th>13</th><th>14</th><th>15</th>
</tr>
<tr>
<td><b>0</b></td>
<td colspan="8" align="center">infos_bf</td>
<td colspan="8" align="center">general_bf</td>
</tr>
<tr>
<td><b>16</b></td>
<td colspan="16" align="center">position_x</td>
</tr>
<tr>
<td><b>32</b></td>
<td colspan="16" align="center">position_y</td>
</tr>
</table>

*infos_bf* : the following bit-field :

|| bit || description ||
|| 0 - 3  || Integer : player number (1 to 5) ||
|| 4 || Boolean :Â team (0 or 1) ||
|| 5 || Boolean : player has the ball ||
|| 6-7 || unused ||

*general_bf* : general purpose bit-field that may be use  to easily transmit informations about players between different parts of a single board; for instance this bit-field may be use by the strategy part to remember which player is a defender, an attacker etc.

The total size of the structure would be 48bits (6 bytes).

A C implementation of this structure would be :
{{{
struct player_infos_bf {
    unsigned num : 4;
    unsigned team : 1;
    unsigned has_ball : 1;
    : 2; //padding to get 8 bits
};

struct player_struct
{
      struct player_infos_bf infos;
      char general_bf;
      unsigned short int x __attribute__ ((aligned (16)));
      unsigned short int y __attribute__ ((aligned (16)));
} __attribute__((__packed__));

}}}

== Game state ==

The game state is basically the state of all the players and the state off the ball.